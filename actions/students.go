package actions

import (
	"github.com/connelevalsam/BuffaloProjects/simple-crud/models"
	"github.com/gobuffalo/buffalo"
	"github.com/markbates/pop"
	"github.com/pkg/errors"
)

// This file is generated by Buffalo. It offers a basic structure for
// adding, editing and deleting a page. If your model is more
// complex or you need more than the basic implementation you need to
// edit this file.

// Following naming logic is implemented in Buffalo:
// Model: Singular (Student)
// DB Table: Plural (students)
// Resource: Plural (Students)
// Path: Plural (/students)
// View Template Folder: Plural (/templates/students/)

// StudentsResource is the resource for the student model
type StudentsResource struct {
	buffalo.Resource
}

// List gets all Students. This function is mapped to the path
// GET /students
func (v StudentsResource) List(c buffalo.Context) error {
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)
	students := &models.Students{}
	// Paginate results. Params "page" and "per_page" control pagination.
	// Default values are "page=1" and "per_page=20".
	q := tx.PaginateFromParams(c.Params())
	// You can order your list here. Just change
	err := q.All(students)
	// to:
	// err := q.Order("created_at desc").All(students)
	if err != nil {
		return errors.WithStack(err)
	}
	// Make Students available inside the html template
	c.Set("students", students)
	// Add the paginator to the context so it can be used in the template.
	c.Set("pagination", q.Paginator)
	return c.Render(200, r.HTML("students/index.html"))
}

// Show gets the data for one Student. This function is mapped to
// the path GET /students/{student_id}
func (v StudentsResource) Show(c buffalo.Context) error {
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)
	// Allocate an empty Student
	student := &models.Student{}
	// To find the Student the parameter student_id is used.
	err := tx.Find(student, c.Param("student_id"))
	if err != nil {
		return errors.WithStack(err)
	}
	// Make student available inside the html template
	c.Set("student", student)
	return c.Render(200, r.HTML("students/show.html"))
}

// New renders the formular for creating a new Student.
// This function is mapped to the path GET /students/new
func (v StudentsResource) New(c buffalo.Context) error {
	// Make student available inside the html template
	c.Set("student", &models.Student{})
	return c.Render(200, r.HTML("students/new.html"))
}

// Create adds a Student to the DB. This function is mapped to the
// path POST /students
func (v StudentsResource) Create(c buffalo.Context) error {
	// Allocate an empty Student
	student := &models.Student{}
	// Bind student to the html form elements
	err := c.Bind(student)
	if err != nil {
		return errors.WithStack(err)
	}
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)
	// Validate the data from the html form
	verrs, err := tx.ValidateAndCreate(student)
	if err != nil {
		return errors.WithStack(err)
	}
	if verrs.HasAny() {
		// Make student available inside the html template
		c.Set("student", student)
		// Make the errors available inside the html template
		c.Set("errors", verrs)
		// Render again the new.html template that the user can
		// correct the input.
		return c.Render(422, r.HTML("students/new.html"))
	}
	// If there are no errors set a success message
	c.Flash().Add("success", "Student was created successfully")
	// and redirect to the students index page
	return c.Redirect(302, "/students/%s", student.ID)
}

// Edit renders a edit formular for a student. This function is
// mapped to the path GET /students/{student_id}/edit
func (v StudentsResource) Edit(c buffalo.Context) error {
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)
	// Allocate an empty Student
	student := &models.Student{}
	err := tx.Find(student, c.Param("student_id"))
	if err != nil {
		return errors.WithStack(err)
	}
	// Make student available inside the html template
	c.Set("student", student)
	return c.Render(200, r.HTML("students/edit.html"))
}

// Update changes a student in the DB. This function is mapped to
// the path PUT /students/{student_id}
func (v StudentsResource) Update(c buffalo.Context) error {
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)
	// Allocate an empty Student
	student := &models.Student{}
	err := tx.Find(student, c.Param("student_id"))
	if err != nil {
		return errors.WithStack(err)
	}
	// Bind Student to the html form elements
	err = c.Bind(student)
	if err != nil {
		return errors.WithStack(err)
	}
	verrs, err := tx.ValidateAndUpdate(student)
	if err != nil {
		return errors.WithStack(err)
	}
	if verrs.HasAny() {
		// Make student available inside the html template
		c.Set("student", student)
		// Make the errors available inside the html template
		c.Set("errors", verrs)
		// Render again the edit.html template that the user can
		// correct the input.
		return c.Render(422, r.HTML("students/edit.html"))
	}
	// If there are no errors set a success message
	c.Flash().Add("success", "Student was updated successfully")
	// and redirect to the students index page
	return c.Redirect(302, "/students/%s", student.ID)
}

// Destroy deletes a student from the DB. This function is mapped
// to the path DELETE /students/{student_id}
func (v StudentsResource) Destroy(c buffalo.Context) error {
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)
	// Allocate an empty Student
	student := &models.Student{}
	// To find the Student the parameter student_id is used.
	err := tx.Find(student, c.Param("student_id"))
	if err != nil {
		return errors.WithStack(err)
	}
	err = tx.Destroy(student)
	if err != nil {
		return errors.WithStack(err)
	}
	// If there are no errors set a flash message
	c.Flash().Add("success", "Student was destroyed successfully")
	// Redirect to the students index page
	return c.Redirect(302, "/students")
}
