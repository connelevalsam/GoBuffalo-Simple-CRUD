package actions

import (
	"github.com/connelevalsam/BuffaloProjects/simple-crud/models"
	"github.com/gobuffalo/buffalo"
	"github.com/markbates/pop"
	"github.com/pkg/errors"
)

// This file is generated by Buffalo. It offers a basic structure for
// adding, editing and deleting a page. If your model is more
// complex or you need more than the basic implementation you need to
// edit this file.

// Following naming logic is implemented in Buffalo:
// Model: Singular (Lecturer)
// DB Table: Plural (lecturers)
// Resource: Plural (Lecturers)
// Path: Plural (/lecturers)
// View Template Folder: Plural (/templates/lecturers/)

// LecturersResource is the resource for the lecturer model
type LecturersResource struct {
	buffalo.Resource
}

// List gets all Lecturers. This function is mapped to the path
// GET /lecturers
func (v LecturersResource) List(c buffalo.Context) error {
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)
	lecturers := &models.Lecturers{}
	// Paginate results. Params "page" and "per_page" control pagination.
	// Default values are "page=1" and "per_page=20".
	q := tx.PaginateFromParams(c.Params())
	// You can order your list here. Just change
	err := q.All(lecturers)
	// to:
	// err := q.Order("created_at desc").All(lecturers)
	if err != nil {
		return errors.WithStack(err)
	}
	// Make Lecturers available inside the html template
	c.Set("lecturers", lecturers)
	// Add the paginator to the context so it can be used in the template.
	c.Set("pagination", q.Paginator)
	return c.Render(200, r.HTML("lecturers/index.html"))
}

// Show gets the data for one Lecturer. This function is mapped to
// the path GET /lecturers/{lecturer_id}
func (v LecturersResource) Show(c buffalo.Context) error {
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)
	// Allocate an empty Lecturer
	lecturer := &models.Lecturer{}
	// To find the Lecturer the parameter lecturer_id is used.
	err := tx.Find(lecturer, c.Param("lecturer_id"))
	if err != nil {
		return errors.WithStack(err)
	}
	// Make lecturer available inside the html template
	c.Set("lecturer", lecturer)
	return c.Render(200, r.HTML("lecturers/show.html"))
}

// New renders the formular for creating a new Lecturer.
// This function is mapped to the path GET /lecturers/new
func (v LecturersResource) New(c buffalo.Context) error {
	// Make lecturer available inside the html template
	c.Set("lecturer", &models.Lecturer{})
	return c.Render(200, r.HTML("lecturers/new.html"))
}

// Create adds a Lecturer to the DB. This function is mapped to the
// path POST /lecturers
func (v LecturersResource) Create(c buffalo.Context) error {
	// Allocate an empty Lecturer
	lecturer := &models.Lecturer{}
	// Bind lecturer to the html form elements
	err := c.Bind(lecturer)
	if err != nil {
		return errors.WithStack(err)
	}
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)
	// Validate the data from the html form
	verrs, err := tx.ValidateAndCreate(lecturer)
	if err != nil {
		return errors.WithStack(err)
	}
	if verrs.HasAny() {
		// Make lecturer available inside the html template
		c.Set("lecturer", lecturer)
		// Make the errors available inside the html template
		c.Set("errors", verrs)
		// Render again the new.html template that the user can
		// correct the input.
		return c.Render(422, r.HTML("lecturers/new.html"))
	}
	// If there are no errors set a success message
	c.Flash().Add("success", "Lecturer was created successfully")
	// and redirect to the lecturers index page
	return c.Redirect(302, "/lecturers/%s", lecturer.ID)
}

// Edit renders a edit formular for a lecturer. This function is
// mapped to the path GET /lecturers/{lecturer_id}/edit
func (v LecturersResource) Edit(c buffalo.Context) error {
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)
	// Allocate an empty Lecturer
	lecturer := &models.Lecturer{}
	err := tx.Find(lecturer, c.Param("lecturer_id"))
	if err != nil {
		return errors.WithStack(err)
	}
	// Make lecturer available inside the html template
	c.Set("lecturer", lecturer)
	return c.Render(200, r.HTML("lecturers/edit.html"))
}

// Update changes a lecturer in the DB. This function is mapped to
// the path PUT /lecturers/{lecturer_id}
func (v LecturersResource) Update(c buffalo.Context) error {
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)
	// Allocate an empty Lecturer
	lecturer := &models.Lecturer{}
	err := tx.Find(lecturer, c.Param("lecturer_id"))
	if err != nil {
		return errors.WithStack(err)
	}
	// Bind Lecturer to the html form elements
	err = c.Bind(lecturer)
	if err != nil {
		return errors.WithStack(err)
	}
	verrs, err := tx.ValidateAndUpdate(lecturer)
	if err != nil {
		return errors.WithStack(err)
	}
	if verrs.HasAny() {
		// Make lecturer available inside the html template
		c.Set("lecturer", lecturer)
		// Make the errors available inside the html template
		c.Set("errors", verrs)
		// Render again the edit.html template that the user can
		// correct the input.
		return c.Render(422, r.HTML("lecturers/edit.html"))
	}
	// If there are no errors set a success message
	c.Flash().Add("success", "Lecturer was updated successfully")
	// and redirect to the lecturers index page
	return c.Redirect(302, "/lecturers/%s", lecturer.ID)
}

// Destroy deletes a lecturer from the DB. This function is mapped
// to the path DELETE /lecturers/{lecturer_id}
func (v LecturersResource) Destroy(c buffalo.Context) error {
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)
	// Allocate an empty Lecturer
	lecturer := &models.Lecturer{}
	// To find the Lecturer the parameter lecturer_id is used.
	err := tx.Find(lecturer, c.Param("lecturer_id"))
	if err != nil {
		return errors.WithStack(err)
	}
	err = tx.Destroy(lecturer)
	if err != nil {
		return errors.WithStack(err)
	}
	// If there are no errors set a flash message
	c.Flash().Add("success", "Lecturer was destroyed successfully")
	// Redirect to the lecturers index page
	return c.Redirect(302, "/lecturers")
}
